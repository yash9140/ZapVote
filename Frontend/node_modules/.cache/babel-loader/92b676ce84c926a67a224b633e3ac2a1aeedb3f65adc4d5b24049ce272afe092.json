{"ast":null,"code":"import _objectSpread from \"C:/Users/Lenovo/Documents/Interaction/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"C:/Users/Lenovo/Documents/Interaction/Frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/*!\n * Chart.js v4.4.9\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = \"animation-\".concat(transition);\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nclass PieController extends DoughnutController {}\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nclass ScatterController extends DatasetController {\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    _defineProperty(this, \"options\", void 0);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  constructor() {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"$animations\", void 0);\n  }\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len0 = arguments.length, args = new Array(_len0), _key0 = 0; _key0 < _len0; _key0++) {\n      args[_key0] = arguments[_key0];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len1 = arguments.length, scaleOptions = new Array(_len1 > 1 ? _len1 - 1 : 0), _key1 = 1; _key1 < _len1; _key1++) {\n    scaleOptions[_key1 - 1] = arguments[_key1];\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(\"Cannot determine type of '\".concat(id, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[\"datasets.\".concat(datasetType), '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), () => [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), () => [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), () => [[\"plugins.\".concat(id), ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.4.9\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    const clip = getDatasetClipArea(this, meta);\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n    meta.controller.draw();\n    if (clip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"circumference\", void 0);\n    _defineProperty(this, \"endAngle\", void 0);\n    _defineProperty(this, \"fullCircles\", void 0);\n    _defineProperty(this, \"innerRadius\", void 0);\n    _defineProperty(this, \"outerRadius\", void 0);\n    _defineProperty(this, \"pixelMargin\", void 0);\n    _defineProperty(this, \"startAngle\", void 0);\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\n_defineProperty(ArcElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash'\n});\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"parsed\", void 0);\n    _defineProperty(this, \"skip\", void 0);\n    _defineProperty(this, \"stop\", void 0);\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n_defineProperty(PointElement, \"id\", 'point');\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    chart,\n    index,\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis,\n      clip\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale,\n    clip\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property,\n      clip\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property,\n    clip\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale,\n    clip\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n    ctx.beginPath();\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', _objectSpread(_objectSpread({}, args), {}, {\n        cancelable: true\n      })) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","arguments","length","Date","now","remaining","running","items","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isNumberFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","concat","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","new","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","_ref","inflateAmount","BarController","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_len","_key","_each","_len2","_key2","addControllers","_len3","_key3","_len4","_key4","addPlugins","_len5","_key5","addScales","_len6","_key6","getController","_get","getPlugin","getScale","removeControllers","_len7","_key7","removeElements","_len8","_key8","removePlugins","_len9","_key9","removeScales","_len0","_key0","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","_ref2","pluginOpts","_ref3","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","_len1","scaleOptions","_key1","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getDatasetClipArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_ref4","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","inRange$1","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","_objectSpread","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_ref5","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_ref6","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","_ref7","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","_ref8","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\Lenovo\\Documents\\Interaction\\Frontend\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea, _isDomSupported, retinaScale, getDatasetClipArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    // @ts-expect-error\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea, getDatasetClipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {chart, index, line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis, clip});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale, clip} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property, clip});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property, clip});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale, clip} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}